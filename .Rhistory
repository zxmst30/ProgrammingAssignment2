makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setInverse <- function(solve) Inv <<- solve
getInverse <- function() Inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
Inv <- x$getInverse()  #loads the cache from makeCacheMatrix into an object called Inv
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)    #if cache is not empty, return the saved values
}
data <- x$get()        # loads the matrix into an object called data
Inv <- solve(data)     # calculates the inverse of the matrix using the solve function
x$setInvers(Inv)       # saves the calculated inverse matrix to the cache
Inv                    # returns the inverse matrix
}
M1 <- makeCacheMatrix(matrix(1:4,2))
cacheSolve(M1)
cacheSolve(M1)
M2 <- makeCacheMatrix(matrix(5:8,2))
cacheSolve(M2)
solve(matrix(5:8, 2))
